{"version":3,"sources":["../src/infect.js"],"names":["OUTBREAK_LEVEL","doesOutbreakOccurs","city","disease","findLinksCityNames","links","cityName","reduce","linkedCities","link","idx","indexOf","push","findContaminatedCities","gameMap","affectedCities","contaminatedCities","findLinksCityNamesForMap","bind","recursiveFindAffected","linkedCityNames","outbreakCities","forEach","includes","length","map","array","cities","diseases","find","d","name","diseaseName","c","outbreakCount"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,iBAAiB,CAAvB;;AAEA,MAAMC,qBAAqB,CAACC,IAAD,EAAiBC,OAAjB,KACzB,qCAAsBD,IAAtB,EAA4BC,OAA5B,KAAwCH,cAD1C;;AAIA,MAAMI,qBAAqB,CAACC,KAAD,EAAQC,QAAR,KACzBD,MAAME,MAAN,CACI,CAACC,YAAD,EAAeC,IAAf,KAAwB;AACtB,QAAMC,MAAMD,KAAKE,OAAL,CAAaL,QAAb,CAAZ;AACA,MAAII,QAAQ,CAAC,CAAb,EAAgB;AACdF,iBAAaI,IAAb,CAAkBH,KAAKC,QAAQ,CAAR,GAAY,CAAZ,GAAgB,CAArB,CAAlB;AACD;AACD,SAAOF,YAAP;AACD,CAPL,KADF;;AAaA,MAAMK,yBAAyB,CAACC,OAAD,EAAuBR,QAAvB,EAAiCH,OAAjC,KAA6C;AAC1E,QAAMY,mBAAN;AACA,QAAMC,uBAAN;AACA,QAAMC,2BAA2Bb,mBAAmBc,IAAnB,CAAwB,IAAxB,EAA8BJ,QAAQT,KAAtC,CAAjC;;AAEC,YAASc,qBAAT,CAA+BC,eAA/B,EAA+D;AAC9D,UAAMC,mBAAN;;AAEAD,oBAAgBE,OAAhB,CAAwBhB,YAAY;AAClC,UAAIS,eAAeQ,QAAf,CAAwBjB,QAAxB,CAAJ,EAAuC;;AAEvCS,qBAAeH,IAAf,CAAoBN,QAApB;AACA,YAAMJ,OAAO,uBAAQY,OAAR,EAAiBR,QAAjB,CAAb;AACA,UAAIL,mBAAmBC,IAAnB,EAAyBC,OAAzB,CAAJ,EAAuC;AACrCkB,uBAAeT,IAAf,CAAoBN,QAApB;AACD,OAFD,MAEO;AACLU,2BAAmBJ,IAAnB,CAAwBN,QAAxB;AACD;AACF,KAVD;;AAYA,QAAIe,eAAeG,MAAnB,EAA2B;AACzB,YAAMT,iBAAiBM,eAAeI,GAAf,CAAmBR,wBAAnB,CAAvB;AACAE,4BAAsBJ,eAAeR,MAAf,CAAsB,CAACmB,KAAD,EAAQC,MAAR,KAAmB;AAC7DD,cAAMd,IAAN,CAAW,GAAGe,MAAd;AACA,eAAOD,KAAP;AACD,OAHqB,CAAtB;AAID;AACF,GAtBA,EAsBCT,yBAAyBX,QAAzB,CAtBD,CAAD;;AAwBA,SAAOU,kBAAP;AACD,CA9BD;;kBAgCe,CAACF,OAAD,EAAuBR,QAAvB,KAA4C;AACzD,QAAMJ,OAAiB,uBAAQY,OAAR,EAAiBR,QAAjB,CAAvB;AACA,QAAMH,UAAuBW,QAAQc,QAAR,CAAiBC,IAAjB,CAAsBC,KAAKA,EAAEC,IAAF,KAAW7B,KAAK8B,WAA3C,CAA7B;;AAEA,MAAI,CAAC/B,mBAAmBC,IAAnB,EAAyBC,OAAzB,CAAL,EAAwC;AACtC,wBACKW,OADL;AAEEa,cAAQb,QAAQa,MAAR,CAAeF,GAAf,CAAmBQ,KAAMA,EAAEF,IAAF,KAAWzB,QAAX,GAAsB,2BAAY2B,CAAZ,EAAe9B,OAAf,CAAtB,GAAgD8B,CAAzE;AAFV;AAID;;AAED,QAAMjB,qBAAqBH,uBAAuBC,OAAvB,EAAgCR,QAAhC,EAA0CH,OAA1C,CAA3B;;AAEA,sBACKW,OADL;AAEEoB,mBAAepB,QAAQoB,aAAR,GAAwB,CAFzC;AAGEP,YAAQb,QAAQa,MAAR,CAAeF,GAAf,CAAmBQ,KACzBjB,mBAAmBO,QAAnB,CAA4BU,EAAEF,IAA9B,IAAsC,2BAAYE,CAAZ,EAAe9B,OAAf,CAAtC,GAAgE8B,CAD1D;AAHV;AAOD,C","file":"infect.js","sourcesContent":["import type { CityType, DiseaseType, GameMapType } from './types';\nimport getCity from './getCity';\nimport getContaminationLevel from './getContaminationLevel';\nimport contaminate from './contaminate';\n\nconst OUTBREAK_LEVEL = 3;\n\nconst doesOutbreakOccurs = (city: CityType, disease: DiseaseType) => (\n  getContaminationLevel(city, disease) >= OUTBREAK_LEVEL\n);\n\nconst findLinksCityNames = (links, cityName) => (\n  links.reduce(\n      (linkedCities, link) => {\n        const idx = link.indexOf(cityName);\n        if (idx !== -1) {\n          linkedCities.push(link[idx === 0 ? 1 : 0]);\n        }\n        return linkedCities;\n      },\n      [],\n    )\n);\n\nconst findContaminatedCities = (gameMap: GameMapType, cityName, disease) => {\n  const affectedCities = [];\n  const contaminatedCities = [];\n  const findLinksCityNamesForMap = findLinksCityNames.bind(null, gameMap.links);\n\n  (function recursiveFindAffected(linkedCityNames: Array<string>) {\n    const outbreakCities = [];\n\n    linkedCityNames.forEach(cityName => {\n      if (affectedCities.includes(cityName)) return;\n\n      affectedCities.push(cityName);\n      const city = getCity(gameMap, cityName);\n      if (doesOutbreakOccurs(city, disease)) {\n        outbreakCities.push(cityName);\n      } else {\n        contaminatedCities.push(cityName);\n      }\n    });\n\n    if (outbreakCities.length) {\n      const affectedCities = outbreakCities.map(findLinksCityNamesForMap);\n      recursiveFindAffected(affectedCities.reduce((array, cities) => {\n        array.push(...cities);\n        return array;\n      }));\n    }\n  }(findLinksCityNamesForMap(cityName)));\n\n  return contaminatedCities;\n};\n\nexport default (gameMap: GameMapType, cityName: string) => {\n  const city: CityType = getCity(gameMap, cityName);\n  const disease: DiseaseType = gameMap.diseases.find(d => d.name === city.diseaseName);\n\n  if (!doesOutbreakOccurs(city, disease)) {\n    return ({\n      ...gameMap,\n      cities: gameMap.cities.map(c => (c.name === cityName ? contaminate(c, disease) : c)),\n    });\n  }\n\n  const contaminatedCities = findContaminatedCities(gameMap, cityName, disease);\n\n  return ({\n    ...gameMap,\n    outbreakCount: gameMap.outbreakCount + 1,\n    cities: gameMap.cities.map(c => (\n      contaminatedCities.includes(c.name) ? contaminate(c, disease) : c\n    )),\n  });\n};\n"]}