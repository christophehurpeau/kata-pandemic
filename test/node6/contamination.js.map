{"version":3,"sources":["../src/contamination.js"],"names":["suite","createTestDisease","createSimpleTestMap","disease","city1","city2","diseases","cities","links","name","createRealCaseTestMap","Atlanta","Chicago","Washington","NewYork","Montreal","SanFrancisco","test","city","contaminatedCity","curedCity","gameMap","city1Name","outbreakCount","forEach"],"mappings":"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","file":"contamination.js","sourcesContent":["/* global suite, test */\nimport { strictEqual } from 'assert';\n\nimport {\n  createGameMap,\n  createDisease,\n  createCity,\n  contaminate,\n  cure,\n  getContaminationLevel,\n  getCity,\n  infect,\n} from '../../src';\n\nsuite('contamination', () => {\n  const createTestDisease = () => createDisease('DiseaseName');\n\n  const createSimpleTestMap = () => {\n    const disease = createTestDisease();\n    const city1 = createCity('TestCity1', disease);\n    const city2 = createCity('TestCity2', disease);\n    return createGameMap({\n      diseases: [disease],\n      cities: [city1, city2],\n      links: [\n        [city1.name, city2.name],\n      ],\n    });\n  };\n\n\n  const createRealCaseTestMap = () => {\n    const disease = createDisease('Blue');\n    const Atlanta = createCity('Atlanta', disease);\n    const Chicago = createCity('Chicago', disease);\n    const Washington = createCity('Washington', disease);\n    const NewYork = createCity('New York', disease);\n    const Montreal = createCity('Montréal', disease);\n    const SanFrancisco = createCity('San Francisco', disease);\n    return createGameMap({\n      diseases: [disease],\n      cities: [Atlanta, Washington, NewYork, Montreal, SanFrancisco, Chicago],\n      links: [\n        [SanFrancisco.name, Chicago.name],\n        [Chicago.name, Montreal.name],\n        [Montreal.name, NewYork.name],\n        [Washington.name, Montreal.name],\n        [Washington.name, NewYork.name],\n        [Washington.name, Atlanta.name],\n        [Chicago.name, Atlanta.name],\n      ],\n    });\n  };\n\n  test('contaminate city', () => {\n    const disease = createTestDisease();\n    const city = createCity('TestCity', disease);\n    const contaminatedCity = contaminate(city, disease);\n    strictEqual(getContaminationLevel(contaminatedCity, disease), 1);\n  });\n\n  test('contaminate contaminated city', () => {\n    const disease = createTestDisease();\n    const city = createCity('TestCity', disease);\n    const contaminatedCity = contaminate(contaminate(city, disease), disease);\n    strictEqual(getContaminationLevel(contaminatedCity, disease), 2);\n  });\n\n\n  test('cure city', () => {\n    const disease = createTestDisease();\n    const city = createCity('TestCity', disease);\n    const contaminatedCity = contaminate(city, disease);\n    const curedCity = cure(contaminatedCity, disease);\n    strictEqual(getContaminationLevel(curedCity, disease), 0);\n  });\n\n\n  test('infect city', () => {\n    let gameMap = createSimpleTestMap();\n    const disease = gameMap.diseases[0];\n    gameMap = infect(gameMap, gameMap.cities[0].name);\n    strictEqual(getContaminationLevel(gameMap.cities[0], disease), 1);\n    strictEqual(getContaminationLevel(gameMap.cities[1], disease), 0);\n  });\n\n  test('outbreak', () => {\n    let gameMap = createSimpleTestMap();\n    const disease = gameMap.diseases[0];\n    const city1Name = gameMap.cities[0].name;\n    gameMap = infect(gameMap, city1Name);\n    gameMap = infect(gameMap, city1Name);\n    gameMap = infect(gameMap, city1Name);\n    strictEqual(gameMap.outbreakCount, 0);\n    strictEqual(getContaminationLevel(gameMap.cities[0], disease), 3);\n    strictEqual(getContaminationLevel(gameMap.cities[1], disease), 0);\n\n    // outbreak\n    gameMap = infect(gameMap, city1Name);\n    strictEqual(gameMap.outbreakCount, 1);\n    strictEqual(getContaminationLevel(gameMap.cities[0], disease), 3);\n    strictEqual(getContaminationLevel(gameMap.cities[1], disease), 1);\n  });\n\n  test('chained outbreak', () => {\n    let gameMap = createRealCaseTestMap();\n\n    const disease = gameMap.diseases[0];\n    gameMap = infect(gameMap, 'Atlanta');\n    gameMap = infect(gameMap, 'Atlanta');\n    gameMap = infect(gameMap, 'Atlanta');\n    gameMap = infect(gameMap, 'Washington');\n    gameMap = infect(gameMap, 'Washington');\n    gameMap = infect(gameMap, 'Washington');\n    strictEqual(getContaminationLevel(getCity(gameMap, 'Atlanta'), disease), 3);\n    strictEqual(getContaminationLevel(getCity(gameMap, 'Washington'), disease), 3);\n    ['Chicago', 'New York', 'Montréal', 'San Francisco'].forEach(name => (\n      strictEqual(getContaminationLevel(getCity(gameMap, name), disease), 0)\n    ));\n\n    // outbreak\n    gameMap = infect(gameMap, 'Atlanta');\n    strictEqual(gameMap.outbreakCount, 1);\n    strictEqual(getContaminationLevel(getCity(gameMap, 'Atlanta'), disease), 3);\n    strictEqual(getContaminationLevel(getCity(gameMap, 'Washington'), disease), 3);\n    ['Chicago', 'New York', 'Montréal'].forEach(name => (\n      strictEqual(getContaminationLevel(getCity(gameMap, name), disease), 1)\n    ));\n    ['San Francisco'].forEach(name => (\n      strictEqual(getContaminationLevel(getCity(gameMap, name), disease), 0)\n    ));\n  });\n});\n"]}